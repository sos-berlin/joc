#%RAML 0.8
title: JOC API
version: 1.12.5
protocols: [ HTTP, HTTPS ]
baseUri: http://test.sos-berlin.com:3001/joc/api
#mediaType: application/json

documentation:
  - title: VERSIONS
    content: !include documentation/common/versions.md


schemas:
  - errors: !include schemas/common/errors-schema.json
  - error420: !include schemas/common/error420-schema.json
  - ok: !include schemas/common/ok-schema.json
  - errorXML: !include schemas/common/error-schema.xsd
  - answerXML: !include schemas/common/answer-schema.xsd
  - okXML: !include schemas/common/ok-schema.xsd
  - jobs: !include schemas/job/jobs_v-schema.json
  - orders: !include schemas/order/orders_v-schema.json
  - jsFilter: !include schemas/common/jobSchedulerId-schema.json
  - jsFilterWithTimeout: !include schemas/jobscheduler/timeoutParam-schema.json
  - jsFilterWithUrl: !include schemas/jobscheduler/urlParam-schema.json
  - jsFilterWithUrlTimeout: !include schemas/jobscheduler/urlTimeoutParam-schema.json
  #- jsObjectFilter: !include schemas/common/jobSchedulerObjectFilter-schema.json
  - taskFilter: !include schemas/job/taskFilter-schema.json
  - orderFilterWithHistoryId: !include schemas/order/orderFilterWithHistoryId-schema.json
  - startJobs: !include schemas/job/startJobs-schema.json
  - startedTasks: !include schemas/job/startedTasks-schema.json
  - modifyJobs: !include schemas/job/modifyJobs-schema.json
  - modifyTasks: !include schemas/job/modifyTasks-schema.json
  - addedOrders: !include schemas/order/addedOrders-schema.json
  - modifyOrders: !include schemas/order/modifyOrders-schema.json
  - modifyJobChains: !include schemas/jobChain/modifyJobChains-schema.json
  - modifyNode: !include schemas/jobChain/modifyNode-schema.json
  - modifyCalendars: !include schemas/calendar/calendarsFilter-schema.json
  - logContent: !include schemas/common/logContent200-schema.json
  - logInfo: !include schemas/common/logInfo200-schema.json
  - security: !include schemas/user/security-schema.json
  - loginConfiguration: !include schemas/configuration/login-schema.json


resourceTypes:
  - error: !include resourceTypes/common/error.raml
  - postWithPlainResponse: !include resourceTypes/joc/postWithPlainResponse.raml
  - postCalendarWithOkResponse: !include resourceTypes/calendar/postJSONWithOkResponse.raml
  - postTaskWithOkResponse: !include resourceTypes/job/postWithOkResponse.raml
  - postTaskAndTimeoutWithOkResponse: !include resourceTypes/job/postTimeoutWithOkResponse.raml
  - postTimeoutWithOkResponse: !include resourceTypes/common/postTimeoutWithOkResponse.raml
  - postURLAndTimeoutWithOkResponse: !include resourceTypes/jobscheduler/postTimeoutWithOkResponse.raml
  - postURLWithOkResponse: !include resourceTypes/jobscheduler/postWithOkResponse.raml
  - postURLWithPlainResponse: !include resourceTypes/jobscheduler/postWithPlainResponse.raml
  - postURLWithOkResponseAfterModify: !include resourceTypes/jobscheduler/postWithOkResponseAfterModify.raml
  - postXMLWithOkResponse: !include resourceTypes/jobscheduler/postXMLWithOkResponse.raml
  - postJSON: !include resourceTypes/common/postJSON.raml
  - postJSONWithOptionalJSId: !include resourceTypes/common/postJSONWithOptionalJSId.raml
  - postJSONWithoutJSId: !include resourceTypes/common/postJSONWithoutJSId.raml
  - postJSON16: !include resourceTypes/common/postJSON16.raml
  - postYADEJSONWithOkResponse: !include resourceTypes/yade/postJSONWithOkResponse.raml
  - postOnlyAccessToken: !include resourceTypes/common/postOnlyAccessToken.raml
  - postOnlyId: !include resourceTypes/common/postOnlyId.raml
  - postJSONWithOkResponse: !include resourceTypes/common/postJSONWithOkResponse.raml
  - postJSONWithoutExample: !include resourceTypes/common/postJSONWithoutExample.raml
  - postForDownload: !include resourceTypes/common/postForDownload.raml
  - postForUpload: !include resourceTypes/common/postForUpload.raml
  - postLog: !include resourceTypes/common/postLog.raml
  - login: !include resourceTypes/user/login.raml
  - logout: !include resourceTypes/user/logout.raml
  - postEvent: !include resourceTypes/common/postEvent.raml
  - modifyJob: !include resourceTypes/job/modify.raml
  - startJob: !include resourceTypes/job/start.raml
  - setRunTimeJob: !include resourceTypes/job/setRunTime.raml
  - resetRunTimeJob: !include resourceTypes/job/resetRunTime.raml
  - postTaskLogWithPlainResponse: !include resourceTypes/job/postWithPlainResponse.raml
  - modifyTasks: !include resourceTypes/job/modifyTasks.raml
  - modifyOrder: !include resourceTypes/order/modify.raml
  - addOrder: !include resourceTypes/order/add.raml
  - startOrder: !include resourceTypes/order/start.raml
  - resumeOrder: !include resourceTypes/order/resume.raml
  - setStateOrder: !include resourceTypes/order/setState.raml
  - setRunTimeOrder: !include resourceTypes/order/setRunTime.raml
  - resetRunTimeOrder: !include resourceTypes/order/resetRunTime.raml
  - postOrderLogWithPlainResponse: !include resourceTypes/order/postWithPlainResponse.raml
  - modifyJobChain: !include resourceTypes/jobChain/modify.raml
  - modifyJobChainNode: !include resourceTypes/jobChain/modifyNode.raml
  - modifyCalendar: !include resourceTypes/calendar/modify.raml
  - loginConfiguration: !include resourceTypes/configuration/login.raml
  

traits:
  - jobschedulerMaster: !include traits/jobschedulerMaster.raml
  - filteredByJob: !include ./traits/filteredByJob.raml
  - filteredByTransferFileId: !include ./traits/filteredByTransferFileId.raml
  - accessToken: !include ./traits/accessToken.raml
  - filename: !include ./traits/filename.raml


/log:
  type:
    postWithPlainResponse:
      description: Provides JOC Cockpit log ([date].stderrout.log) as download
      description1: !include documentation/joc/filename.md
      description200: Content of JOC Cockpit log ([date].stderrout.log) for download
      schema: !include schemas/joc/filename-schema.json

/logs:
  type: error
  post:
    description: <h2>Returns a list of JOC Cockpit logs ([date].stderrout.log)</h2>
    responses:
      200:
        description: " "
        body:
          application/json:
            schema: !include schemas/joc/filenames-schema.json

/security/login:
  type: login 

/security/joc_cockpit_permissions:
  type:
    postOnlyId:
      description: Returns list of user's permissions
      description200: " "
      example200: !include examples/user/permissions-example.json
      schema200: !include schemas/user/permissions-schema.json

/security/logout:
  type: logout

#TODO settings on server, not in cookies
#/settings:
#  /update:

/events:
  type:
    postEvent:
      description200: TODO
      schema: !include schemas/event/register-schema.json
      schema200: !include schemas/event/events-schema.json
      example: TODO
      example200: TODO
  /custom:
    type:
      postJSON:
        description: Custom events
        description1: !include documentation/common/dateFrom.md
        description2: !include documentation/common/dateTo.md
        description3: !include documentation/common/timeZone.md
        description4: " "
        description5: " "
        description6: !include documentation/job/filteredByJobs.md
        description7: !include documentation/order/filteredByOrders.md
        description8: !include documentation/event/filteredByIdClassExit.md
        description9: " "
        description10: !include documentation/common/limit.md
        description200: " "
        schema: !include schemas/event/customEventsFilter-schema.json
        schema200: !include schemas/event/customEvents-schema.json
        example: " "
        example200: " "
 #   /add:
 #     type:
 #       postJSON:
 #         description: add custom events
 #         description1: !include documentation/order/filteredByOrders.md
 #         description2: " "
 #         description3: !include documentation/audit/auditLog.md
 #         description4: " "
 #         description5: " "
 #         description6: " "
 #         description7: " "
 #         description8: " "
 #         description9: " "
 #         description10: " "
 #         description200: " "
 #         schema: modifyOrders
 #         schema200: ok
 #         example: " "
 #         example200: " "
    /add_event:
      type:
        postJSON:
          description: add custom event
          description1: !include documentation/event/modifyCustomEvent.md
          description2: " "
          description3: !include documentation/audit/auditLog.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include schemas/event/modifyCustomEvent-schema.json
          schema200: ok
          example: " "
          example200: " "
    /delete_events:
      type:
        postJSON:
          description: delete custom events
          description1: !include documentation/event/filteredByIds.md
          description2: " "
          description3: !include documentation/audit/auditLog.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include schemas/event/customDeleteEventsFilter-schema.json
          schema200: ok
          example: " "
          example200: " "
/touch:
  type: error
  post:
    description: |
      <h2>Refesh the session timeout</h2>
    responses:
      200:
        description: |
          **Confirm 'Touch' successfully**
        body:
          application/json:
            example: |
              {
                "deliveryDate":"2016-05-05T21:13:35Z",
                "ok":true
              }
            schema: ok
/jobscheduler:
  type:
    postURLWithOkResponseAfterModify:
      description: Volatile JobScheduler information such as its status
      description200: !include documentation/jobscheduler/jobscheduler_v.md
      schema200: !include schemas/jobscheduler/jobscheduler200_v-schema.json
      example200: !include examples/jobscheduler/primary_v-example.json
  /p:
    type:
      postOnlyId:
        description: General permanent JobScheduler information
        description200: !include documentation/jobscheduler/jobscheduler_p.md
        schema200: !include schemas/jobscheduler/jobscheduler200_p-schema.json
        example200: !include examples/jobscheduler/primary_p-example.json
  /ids:
    type: error
    post:
      description: |
        <h2>Returns collection of all available JobScheduler Ids</h2>
      responses:
        200:
          description: |
            * The collection of all available JobScheduler Ids can be used for a
            selectbox in which the user can change the Id.
            * The Id which is specified in the selected field will be used for
            all following requests
          body:
            application/json:
              schema: !include schemas/jobscheduler/jobschedulerIds-schema.json
              example: !include examples/jobscheduler/ids-example.json
#  /statistics:
#    type:
#      postOnlyId:
#        description: JobScheduler statistics
#        description200: !include documentation/jobscheduler/statistics.md
#        schema200: !include schemas/jobscheduler/statistics-schema.json
#        example200: !include examples/jobscheduler/statistics-example.json
  /supervisor:
    type:
      postOnlyId:
        description: Volatile information of the supervisor such as its status
        description200: !include documentation/jobscheduler/supervisor_v.md
        schema200: !include schemas/jobscheduler/jobscheduler200_v-schema.json
        example200: !include examples/jobscheduler/supervisor_v-example.json
    /p:
      type:
        postOnlyId:
          description: General permanent Supervisor information
          description200: !include documentation/jobscheduler/supervisor_p.md
          schema200: !include schemas/jobscheduler/jobscheduler200_p-schema.json
          example200: !include examples/jobscheduler/supervisor_p-example.json
  /db:
    type:
      postOnlyId:
        description: JobScheduler database information
        description200: " "
        schema200: !include schemas/jobscheduler/db-schema.json
        example200: !include examples/jobscheduler/db-example.json
  /agents:
    type:
      postJSON:
        description: Collection of JobScheduler Agents with volatile information.
        description1: !include documentation/jobscheduler/agentsParam.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema: !include schemas/jobscheduler/agentFilter-schema.json
        description200: !include documentation/jobscheduler/agents_v.md
        schema200: !include schemas/jobscheduler/agents_v-schema.json
        example: !include examples/jobscheduler/jobschedulerParam-example.json
        example200: !include examples/jobscheduler/agents_v-example.json
    /p:
      type:
        postJSON:
          description: Collection of JobScheduler Agents with general permanent information
          description1: !include documentation/jobscheduler/agentsParam.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          schema: !include schemas/jobscheduler/agentFilter-schema.json
          description200: !include documentation/jobscheduler/agents_p.md
          schema200: !include schemas/jobscheduler/agents_p-schema.json
          example: !include examples/jobscheduler/jobschedulerParam-example.json
          example200: !include examples/jobscheduler/agents_p-example.json
  /agent_clusters:
    type:
      postJSON:
        description: Collection of JobScheduler Agent Clusters with volatile information
        description1: !include documentation/common/compact.md
        description2: !include documentation/jobscheduler/agentClustersParam.md
        description3: !include documentation/jobscheduler/state.md
        description4: !include documentation/jobscheduler/regex.md
        description5: !include documentation/common/folders.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/jobscheduler/agentCluster_v.md
        schema: !include schemas/jobscheduler/agentClusterFilter-schema.json
        schema200: !include schemas/jobscheduler/agentClusters-schema.json
        example: !include examples/jobscheduler/filteredByAgentCluster-example.json
        example200: !include examples/jobscheduler/agentClusters_v-example.json

  /cluster:
    type:
      postOnlyId:
        description: Id and type of the cluster
        description200: |
          Returns only the JobScheduler Id and the Cluster type such as
          * active (distributed orders cluster)
          * passive (backup cluster)
          * standalone (without cluster)
        schema200: !include schemas/jobscheduler/clusters-schema.json
        example200: !include examples/jobscheduler/cluster-example.json
    /members:
      type:
        postOnlyId:
          description: Collection of JobScheduler cluster members' status
          description200: !include documentation/jobscheduler/jobscheduler_v.md
          schema200: !include schemas/jobscheduler/masters_v-schema.json
          example200: !include examples/jobscheduler/clusterMembers_v-example.json
      /p:
        type:
          postOnlyId:
            description: Collection of JobScheduler cluster members' general information
            description200: !include documentation/jobscheduler/jobscheduler_p.md
            schema200: !include schemas/jobscheduler/masters_p-schema.json
            example200: !include examples/jobscheduler/clusterMembers_p-example.json
    /terminate:
      # TODO ok response is not enough in case of still running task
      type:
        postTimeoutWithOkResponse:
          description: Terminate JobScheduler Cluster with optional timeout
          audit: !include documentation/audit/auditLog.md
    /terminate_failsafe:
      # TODO ok response is not enough in case of still running task
      type:
        postTimeoutWithOkResponse:
          description: Terminate JobScheduler Cluster fail safe with optional timeout
          audit: !include documentation/audit/auditLog.md
    /restart:
      # TODO ok response is not enough in case of still running task
      type:
        postTimeoutWithOkResponse:
          description: Restart JobScheduler Cluster with optional timeout
          audit: !include documentation/audit/auditLog.md
    /reactivate:
      # TODO ok response is not enough in case of still running task
      type:
        postTimeoutWithOkResponse:
          description: Reactivate with optional timeout the primary JobScheduler after a fail-over 
          audit: !include documentation/audit/auditLog.md
#  /command:
#    type:
#      postXMLWithOkResponse:
#        schema: !include schemas/jobscheduler/command-schema.xsd
#        example: |
#          <param.get name=''/>
  /switch:
    type:
      postOnlyId:
        description: Send a JobScheduler Id when the user switches the JobScheduler
        description200: " "
        example200: !include examples/user/permissions-example.json
        schema200: !include schemas/user/permissions-schema.json
  /terminate:
    type:
      postURLAndTimeoutWithOkResponse:
        description: Terminate JobScheduler Master with optional timeout
        audit: !include documentation/audit/auditLog.md
  /restart:
    type:
      postURLAndTimeoutWithOkResponse:
        description: Restart JobScheduler Master with optional timeout
        audit: !include documentation/audit/auditLog.md
  /abort:
    type:
      postURLWithOkResponse:
        description: Abort JobScheduler Master
        audit: !include documentation/audit/auditLog.md
  /abort_and_restart:
    type:
      postURLWithOkResponse:
        description: Abort and restart JobScheduler Master
        audit: !include documentation/audit/auditLog.md
  /pause:
    type:
      postURLWithOkResponse:
        description: Pause JobScheduler Master
        audit: !include documentation/audit/auditLog.md
  /continue:
    type:
      postURLWithOkResponse:
        description: Continue paused JobScheduler Master
        audit: !include documentation/audit/auditLog.md
  /log:
    type:
      postURLWithPlainResponse:
        description: Provides JobScheduler main log (scheduler-[timestamp].[jobschedulerId].log) as download
        description200: Content of main log (scheduler-[timestamp].[jobschedulerId].log) for download
    /info:
      type:
        postJSON:
          description: Log info (temp. filename, size)
          description1: |
            <tr><td>``host``</td><td>optional, string</td><td>host of the JobScheduler Master<br/><b>This parameter is required for a specific JobScheduler in a cluster</b></td><td>localhost</td><td></td></tr>
          description2: |
            <tr><td>``port``</td><td>optional, string</td><td>port of the JobScheduler Master<br/><b>This parameter is required for a specific JobScheduler in a cluster</b></td><td>4444</td><td></td></tr>
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: !include documentation/jobscheduler/logInfo.md
          schema: jsFilterWithUrl
          schema200: logInfo
          example: !include examples/order/filteredOrderWithHistoryId-example.json
          example200: !include examples/common/logInfo-example.json
  /debuglog:
    type:
      postURLWithPlainResponse:
        description: Provides JobScheduler debug log (scheduler.log) as download in gzip format
        description200: Content of debug log (scheduler.log) for download in gzip format
    /info:
      type:
        postJSON:
          description: Log info (temp. filename, size)
          description1: |
            <tr><td>``host``</td><td>optional, string</td><td>host of the JobScheduler Master<br/><b>This parameter is required for a specific JobScheduler in a cluster</b></td><td>localhost</td><td></td></tr>
          description2: |
            <tr><td>``port``</td><td>optional, string</td><td>port of the JobScheduler Master<br/><b>This parameter is required for a specific JobScheduler in a cluster</b></td><td>4444</td><td></td></tr>
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: !include documentation/jobscheduler/logInfo.md
          schema: jsFilterWithUrl
          schema200: logInfo
          example: !include examples/order/filteredOrderWithHistoryId-example.json
          example200: !include examples/common/logInfo-example.json
  /cleanup:
    type:
      postURLWithOkResponse:
        description: Clean up inventory tables from the reporting database
        audit: !include documentation/audit/auditLog.md

/orders:
  type:
    postJSON:
      description: Returns a collection of orders (volatile part) filtered by a period, job chains or order state
      description1: !include documentation/common/compact.md
      description2: !include documentation/common/dateFrom.md
      description3: !include documentation/common/dateTo.md
      description4: !include documentation/common/timeZone.md
      description5: !include documentation/common/regex.md
      description6: !include documentation/order/filteredByOrders.md
      description7: !include documentation/order/state.md
      description8: !include documentation/order/type.md
      description9: !include documentation/common/folders.md
      description10: " "
      description200: !include documentation/order/orders_v.md
      schema: !include schemas/order/ordersFilter-schema.json
      schema200: !include schemas/order/orders_v-schema.json
      example: !include examples/order/filteredOrders-example.json
      example200: !include examples/order/orders_v-example.json
  /p:
    type:
      postJSON:
        description: Returns a collection of orders (permanent part) filtered by a period or job chains
        description1: !include documentation/common/compact.md
        description2: " "
        description3: " "
        description4: " "
        description5: !include documentation/common/regex.md
        description6: !include documentation/order/filteredByOrders.md
        description7: !include documentation/common/folders.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/order/orders_p.md
        schema: !include schemas/order/ordersFilter-schema.json
        schema200: !include schemas/order/orders_p-schema.json
        example: !include examples/order/filteredOrders-example.json
        example200: !include examples/order/orders_p-example.json
  /overview/summary:
      type:
        postJSON:
          description: |
            Summary with number of<h5>
            * successful orders
            * failed orders

            filtered by <code>dateFrom</code> parameter until now
            </h5>
          description1: !include documentation/common/dateFrom.md
          description2: !include documentation/common/dateTo.md
          description3: !include documentation/common/timeZone.md
          description4: " "
          description5: !include documentation/order/filteredByOrders.md
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema200: !include schemas/order/summary-schema.json
          schema: !include schemas/order/ordersFilter-schema.json
          example: |
            {
              "dateFrom": "1d"
            }
          example200: !include examples/order/summary-example.json
  /overview/snapshot:
      type:
        postJSON:
          description: |
            Summary with number of<h5>
            * pending orders
            * running orders
            * suspended orders
            * orders with setback
            * waiting for resource orders
            * blacklist orders
            </h5>
          description1: " "
          description2: !include documentation/jobChain/filteredByJobChains.md
          description3: !include documentation/common/folders.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include schemas/jobChain/jobChainsFilter-schema.json
          example: TODO
          schema200: !include schemas/order/snapshot-schema.json
          example200: !include examples/order/snapshot-example.json
 # /overview/snapshot/event:
 #     type:
 #       postJSON:
 #         description: |
 #           Summary with number of<h5>
 #           * pending orders
 #           * running orders
 #           * suspended orders
 #           * orders with setback
 #           * waiting for resource orders
 #           * blacklist orders
 #           </h5>
 #           <h5>NOTE<br/>
 #           The response comes not immediatly.<br/>
 #           It comes when a value has changed but the latest after one minute.<br/>
 #           It uses the envent from the JobScheduler.<br/></h5>
 #         description1: " "
 #         description2: !include documentation/jobChain/filteredByJobChains.md
 #         description3: !include documentation/common/folders.md
 #         description4: !include documentation/order/close.md
 #         description5: " "
 #         description6: " "
 #         description7: " "
 #         description8: " "
 #         description9: " "
 #         description10: " "
 #         description200: " "
 #         schema: !include schemas/jobChain/jobChainsFilter-schema.json
 #         example: TODO
 #         schema200: !include schemas/order/snapshot-schema.json
 #         example200: !include examples/order/snapshot-example.json
  /history:
    type:
      postJSONWithOptionalJSId:
        description: Order history from _reporting_
        description1: !include documentation/order/filteredByOrders.md
        description2: !include documentation/order/excludeOrders.md
        description3: !include documentation/common/dateFrom.md
        description4: !include documentation/common/dateTo.md
        description5: !include documentation/common/timeZone.md
        description6: !include documentation/common/regex.md
        description7: !include documentation/common/folders.md
        description8: !include documentation/common/limit.md
        description9: !include documentation/common/historyStates.md
        description10: !include documentation/order/historyIds.md
        description11: " "
        description12: " "
        description200: TODO
        schema: !include schemas/order/ordersFilter-schema.json
        schema200: !include schemas/order/history-schema.json
        example: !include examples/order/filteredOrders-example.json
        example200: !include examples/order/orderHistory_p-example.json
    #/group:
    #  is: [ limitableByTime ]
    #  type:
    #    getBaseWithoutExample:
    #      description: TODO post body, query parameter
    #      description200: " "
    #      schema200: !include schemas/order/groupedHistory-schema.json
  /start:
    type:
      startOrder:
        audit: !include documentation/audit/auditLog.md
  /add:
    type:
      addOrder:
        audit: !include documentation/audit/auditLog.md
  /suspend:
    type:
      modifyOrder:
        description: Suspend orders
        audit: !include documentation/audit/auditLog.md
  /resume:
    type:
      resumeOrder:
        audit: !include documentation/audit/auditLog.md
  /reset:
    type:
      modifyOrder:
        description: Reset orders
        audit: !include documentation/audit/auditLog.md
  /remove_setback:
    type:
      modifyOrder:
        description: Remove the setback of the orders
        audit: !include documentation/audit/auditLog.md
  /delete:
    type:
      modifyOrder:
        description: Delete temporary orders
        audit: !include documentation/audit/auditLog.md
  /set_state:
    type:
      setStateOrder:
        audit: !include documentation/audit/auditLog.md
  /set_run_time:
    type:
      setRunTimeOrder:
        audit: !include documentation/audit/auditLog.md
  /reset_run_time:
    type:
      resetRunTimeOrder:
        audit: !include documentation/audit/auditLog.md

/order:
  type:
    postJSON:
      description: order (volatile part)
      description1: !include documentation/order/jobChain.md
      description2: !include documentation/order/orderIdRequired.md
      description3: !include documentation/common/compact.md
      description4: !include documentation/common/suppressObjectNotExistException.md
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include documentation/order/orders_v.md
      schema: !include schemas/order/orderFilter-schema.json
      schema200: !include schemas/order/order200_v-schema.json
      example: !include examples/order/filteredOrderWithCompact-example.json
      example200: !include examples/order/order_v-example.json
  /p:
    type:
      postJSON:
        description: order (permanent part)
        description1: !include documentation/order/jobChain.md
        description2: !include documentation/order/orderIdRequired.md
        description3: !include documentation/common/compact.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/order/orders_p.md
        schema: !include schemas/order/orderFilter-schema.json
        schema200: !include schemas/order/order200_p-schema.json
        example: !include examples/order/filteredOrderWithCompact-example.json
        example200: !include examples/order/order_p-example.json
  /history:
    type:
      postJSON:
        description: Order step history of the specified history id  from _reporting_
        description1: !include documentation/order/jobChain.md
        description2: !include documentation/order/orderIdRequired.md
        description3: !include documentation/order/historyId.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: TODO
        schema: orderFilterWithHistoryId
        schema200: !include schemas/order/stepHistory-schema.json
        example: !include examples/order/filteredOrderWithHistoryId-example.json
        example200: !include examples/order/orderStepHistory_p-example.json
  /log:
    type:
      postLog:
        description1: !include documentation/order/jobChain.md
        description2: !include documentation/order/orderIdRequired.md
        description3: !include documentation/order/historyId.md
        objecttype: order
        schema: orderFilterWithHistoryId
        example: !include examples/order/filteredOrderWithHistoryId-example.json
    /html:
      is: [filename, accessToken, jobschedulerMaster]
      type: error
      get:
        description: |
          <h2>sends log as a complete HTML incl. header to open in a new window</h2>
          TODO:
          * queryParameter orderId, jobChain, historyId
          * how we get a rolling log?
        responses:
          200:
            body:
              text/html:
                example: !include examples/order/log-example.html
    /download:
      type:
        postOrderLogWithPlainResponse:
          description: Provides order log as download
    /info:
      type:
        postJSON:
          description: Log info (temp. filename, size)
          description1: !include documentation/order/jobChain.md
          description2: !include documentation/order/orderIdRequired.md
          description3: !include documentation/order/historyId.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: !include documentation/order/logInfo.md
          schema: orderFilterWithHistoryId
          schema200: logInfo
          example: !include examples/order/filteredOrderWithHistoryId-example.json
          example200: !include examples/common/logInfo-example.json
  /configuration:
    type:
      postJSON:
        description: !include documentation/common/configuration.md
        description1: !include documentation/order/jobChain.md
        description2: !include documentation/order/orderIdRequired.md
        description3: !include documentation/common/configurationFileMimeParam.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: Returns the order configuration in XML or HTML format
        schema: !include schemas/order/orderConfigurationFilter-schema.json
        schema200: !include schemas/common/configuration-schema.json
        example: !include examples/order/filteredOrder-example.json
        example200: !include examples/order/configuration-example.json
  /run_time:
    type:
      postJSON:
        description: run time as XML string embedded in JSON
        description1: !include documentation/order/jobChain.md
        description2: !include documentation/order/orderIdRequired.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: Returns the run time as XML string in the JSON content field
        schema: !include schemas/order/orderFilter-schema.json
        schema200: !include schemas/common/runtime200-schema.json
        example: !include examples/order/filteredOrder-example.json
        example200: !include examples/common/runtime-example.json
  /calendars:
    type:
      postJSON:
        description: send assigned calendars
        description1: !include documentation/order/jobChain.md
        description2: !include documentation/order/orderIdRequired.md
        description3: !include documentation/common/compact.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/calendar/calendar.md
        schema: !include schemas/order/orderFilter-schema.json
        schema200: !include schemas/calendar/calendars-schema.json
        example: !include examples/order/filteredOrder-example.json
        example200: TODO

/jobs:
  type:
    postJSON:
      description: Returns a collection of jobs (volatile part) filtered by a period or job state
      description1: !include documentation/common/compact.md
      description2: !include documentation/common/dateFrom.md
      description3: !include documentation/common/dateTo.md
      description4: !include documentation/common/timeZone.md
      description5: !include documentation/common/regex.md
      description6: !include documentation/common/folders.md
      description7: !include documentation/job/filteredByJobs.md
      description8: !include documentation/job/orderJob.md
      description9: !include documentation/job/state.md
      description10: " "
      description200: !include documentation/job/jobs_v.md
      schema: !include schemas/job/jobsFilter-schema.json
      schema200: jobs
      example: TODO
      example200: !include examples/job/jobs_v-example.json
  /p:
    type:
      postJSON:
        description: Returns a collection of jobs (permanent part) filtered by a period
        description1: !include documentation/common/compact.md
        description2: " "
        description3: " "
        description4: " "
        description5: !include documentation/common/regex.md
        description6: !include documentation/common/folders.md
        description7: !include documentation/job/filteredByJobs.md
        description8: !include documentation/job/orderJob.md
        description9: " "
        description10: " "
        description200: !include documentation/job/jobs_p.md
        schema: !include schemas/job/jobsFilter-schema.json
        schema200: !include schemas/job/jobs_p-schema.json
        example: TODO
        example200: !include examples/job/jobs_p-example.json
  /overview/summary:
    type:
      postJSON:
        description: |
            Summary with number of<h5>
            * successful tasks
            * failed tasks

            filtered by <code>dateFrom</code> parameter until now
            </h5>
        description1: !include documentation/common/dateFrom.md
        description2: !include documentation/common/dateTo.md
        description3: !include documentation/common/timeZone.md
        description4: " "
        description5: !include documentation/job/filteredByJobs.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema200: !include schemas/job/summary-schema.json
        schema: !include schemas/job/jobsFilter-schema.json
        example: |
            {
              "dateFrom": "1d"
            }
        example200: !include examples/job/summary-example.json
  /overview/snapshot:
    type:
      postOnlyId:
        description: |
            Summary with number of<h5>
            * pending jobs
            * running jobs
            * stopped jobs
            * waiting for process jobs
            * tasks
            </h5>
        description200: " "
        schema200: !include schemas/job/snapshot-schema.json
        example200: !include examples/job/snapshot-example.json
  /start:
    type:
      startJob:
        audit: !include documentation/audit/auditLog.md
  /stop:
    type:
      modifyJob:
        description: Stops jobs
        audit: !include documentation/audit/auditLog.md
  /unstop:
    type:
      modifyJob:
        description: Unstops jobs
        audit: !include documentation/audit/auditLog.md
  /set_run_time:
    type:
      setRunTimeJob:
        audit: !include documentation/audit/auditLog.md
  /reset_run_time:
    type:
      resetRunTimeJob:
        audit: !include documentation/audit/auditLog.md
  # TODO /end_, /suspend_ and /continueAllTasks supported or not?
  /end_all_tasks:
    type:
      modifyJob:
        description: |
          End all tasks of the jobs
          <h5 style="color:red;">Only for API Jobs!</h5>
        audit: !include documentation/audit/auditLog.md
  /suspend_all_tasks:
    type:
      modifyJob:
        description: |
          Suspend all tasks of the jobs
          <h5 style="color:red;">Only for API Jobs!</h5>
        audit: !include documentation/audit/auditLog.md
  /continue_all_tasks:
    type:
      modifyJob:
        description: |
          Continue all tasks of the jobs
          <h5 style="color:red;">Only for API Jobs!</h5>
        audit: !include documentation/audit/auditLog.md

/job:
  type:
    postJSON:
      description: job (volatile part)
      description1: !include documentation/common/compact.md
      description2: " "
      description3: !include documentation/job/jobRequired.md
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include documentation/job/jobs_v.md
      schema: !include schemas/job/jobFilter-schema.json
      schema200: !include schemas/job/job200_v-schema.json
      example: !include examples/job/filteredJobWithCompact-example.json
      example200: !include examples/job/job_v-example.json
  /p:
    type:
      postJSON:
        description: job (permanent part)
        description1: !include documentation/common/compact.md
        description2: !include documentation/job/jobRequired.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/job/jobs_p.md
        schema: !include schemas/job/jobFilter-schema.json
        schema200: !include schemas/job/job200_p-schema.json
        example: !include examples/job/filteredJobWithCompact-example.json
        example200: !include examples/job/job_p-example.json
  /order_queue:
    type:
      postJSON:
        description: This resource is only relevant for order jobs
        description1: !include documentation/common/compact.md
        description2: " "
        description3: !include documentation/job/jobRequired.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/job/jobOrderQueue.md
        schema: !include schemas/job/jobFilter-schema.json
        schema200: !include schemas/job/job200_v-schema.json
        example: !include examples/job/filteredJobWithJobChainNode-example.json
        example200: !include examples/job/job_v-example.json
  /history:
    type:
      postJSON:
        description: Last 25 task history item of the job from _JobScheduler_
        description1: !include documentation/job/jobRequired.md
        description2: !include documentation/common/maxLastHistoryItems.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: TODO
        schema: !include schemas/job/jobHistoryFilter-schema.json
        schema200: !include schemas/job/history-schema.json
        example: TODO
        example200: !include examples/job/taskHistoryItems-example.json
  /configuration:
    type:
      postJSON:
        description: !include documentation/common/configuration.md
        description1: !include documentation/job/jobRequired.md
        description2: !include documentation/common/configurationFileMimeParam.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: Returns the job configuration in XML or HTML format
        schema: !include schemas/job/jobConfigurationFilter-schema.json
        schema200: !include schemas/common/configuration-schema.json
        example: " "
        example200: !include examples/job/configuration-example.json
  /description:
    is: [ accessToken, jobschedulerMaster, filteredByJob ]
    type: error
    get:
      responses:
        200:
          body:
            text/html:
  /run_time:
    type:
      postJSON:
        description: run time as XML string embedded in JSON
        description1: !include documentation/job/jobRequired.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: Returns the run time as XML string in the JSON content field
        schema: !include schemas/job/jobFilter-schema.json
        schema200: !include schemas/common/runtime200-schema.json
        example: TODO
        example200: !include examples/common/runtime-example.json
  /calendars:
    type:
      postJSON:
        description: send assigned calendars 
        description1: !include documentation/job/jobRequired.md
        description2: !include documentation/common/compact.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/calendar/calendar.md
        schema: !include schemas/job/jobFilter-schema.json
        schema200: !include schemas/calendar/calendars-schema.json
        example: TODO
        example200: TODO
/tasks:
  description: |
    This is not an API call. Use its children!!
  /history:
    type:
      postJSONWithOptionalJSId:
        description: Task history from _reporting_ (permanent)
        description1: !include documentation/job/filteredByJobs.md
        description2: !include documentation/job/excludeJobs.md
        description3: !include documentation/common/dateFrom.md
        description4: !include documentation/common/dateTo.md
        description5: !include documentation/common/timeZone.md
        description6: !include documentation/common/regex.md
        description7: !include documentation/common/folders.md
        description8: !include documentation/common/limit.md
        description9: !include documentation/common/historyStates.md
        description10: !include documentation/job/taskIds.md
        description11: !include documentation/job/taskIdOfOrder.md
        description12: !include documentation/job/filteredByOrders.md
        description200: TODO
        schema: !include schemas/job/jobsFilter-schema.json
        schema200: !include schemas/job/history-schema.json
        example: TODO
        example200: !include examples/job/taskHistory_p-example.json
  /terminate:
    type:
      modifyTasks:
        description: Terminate tasks (by SIGTERM) - Only for Unix
        description1: " "
        audit: !include documentation/audit/auditLog.md
  /terminate_within:
    type:
      modifyTasks:
        description: Terminate tasks with timeout (sends first SIGTERM and later SIGKILL) - Only for Unix
        description1: !include documentation/common/timeout.md
        audit: !include documentation/audit/auditLog.md
  /kill:
    type:
      modifyTasks:
        description: Kill tasks (sends SIGKILL)
        description1: " "
        audit: !include documentation/audit/auditLog.md
  /end:
    type:
      modifyTasks:
        description: End tasks - Only for API Jobs
        description1: " "
        audit: !include documentation/audit/auditLog.md

/task:
  type:
    postJSON:
      description: Task information
      description1: !include documentation/job/task.md
      description2: " "
      description3: " "
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: TODO
      schema: taskFilter
      schema200: !include schemas/job/task200-schema.json
      example: TODO
      example200: TODO
  #/history: see /tasks/history
  #  type:
  #    postJSON:
  #      description: Task history information
  #      description1: !include documentation/job/task.md
  #      description2: " "
  #      description3: " "
  #      description4: " "
  #      description5: " "
  #      description6: " "
  #      description7: " "
  #      description8: " "
  #      description9: " "
  #      description200: TODO
  #      schema: !include schemas/job/taskFilter-schema.json
  #      schema200: !include schemas/job/historyItem200-schema.json
  #      example: TODO
  #      example200: !include examples/job/taskHistoryItem_p-example.json
  /log:
    type:
      postLog:
        description1: !include documentation/job/task.md
        description2: " "
        description3: " "
        objecttype: task
        schema: taskFilter
        example: TODO
    /html:
      is: [filename, accessToken, jobschedulerMaster]
      type: error
      get:
        description: |
          <h2>sends log as a complete HTML incl. header to open in a new window</h2>
          TODO:
          * queryParameter taskId
          * how we get a rolling log?
        responses:
          200:
            body:
              text/html:
                example: !include examples/order/log-example.html
    /download:
      type:
        postTaskLogWithPlainResponse:
          description: Provides task log as download
    /info:
      type:
        postJSON:
          description: Log info (temp. filename, size)
          description1: !include documentation/job/task.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: !include documentation/job/logInfo.md
          schema: taskFilter
          schema200: logInfo
          example: TODO
          example200: !include examples/common/logInfo-example.json

/job_chains:
  type:
    postJSON:
      description: Collection of job chains (volatile part)
      description1: !include documentation/common/compact.md
      description2: " "
      description3: !include documentation/common/regex.md
      description4: !include documentation/common/folders.md
      description5: !include documentation/jobChain/filteredByJobChains.md
      description6: !include documentation/jobChain/filteredByJobChainState.md
      description7: !include documentation/jobChain/maxOrders.md
      description8: !include documentation/jobChain/jobFilter.md
      description9: " "
      description10: " "
      schema: !include schemas/jobChain/jobChainsFilter-schema.json
      description200: !include documentation/jobChain/jobChains_v.md
      schema200: !include schemas/jobChain/jobChains_v-schema.json
      example: TODO
      example200: !include examples/jobChain/jobChains_v-example.json
  /p:
    type:
      postJSON:
        description: Collection of job chains (permant part)
        description1: !include documentation/common/compact.md
        description2: !include documentation/common/regex.md
        description3: !include documentation/common/folders.md
        description4: !include documentation/jobChain/filteredByJobChains.md
        description5: !include documentation/jobChain/jobFilter.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema: !include schemas/jobChain/jobChainsFilter-schema.json
        description200: !include documentation/jobChain/jobChains_p.md
        schema200: !include schemas/jobChain/jobChains_p-schema.json
        example: TODO
        example200: !include examples/jobChain/jobChains_p-example.json
  /tree:
    type:
       postJSON:
         description: This is not a real API Url. Only for mock data. Please use ./tree later with "types":["JOBCHAIN"]
         description1: " "
         description2: " "
         description3: " "
         description4: " "
         description5: " "
         description6: " "
         description7: " "
         description8: " "
         description9: " "
         description10: " "
         description200: " "
         schema: !include schemas/tree/treeFilter-schema.json
         schema200: !include schemas/tree/treeView-schema.json
         example: !include examples/tree/filteredtree-example.json
         example200: !include examples/tree/tree_jobChains-example.json
  /stop:
    type:
      modifyJobChain:
        description: Not available for distributed job chains
        audit: !include documentation/audit/auditLog.md
  /unstop:
    type:
      modifyJobChain:
        description : Not available for distributed job chains
        audit: !include documentation/audit/auditLog.md
  #/delete_temp_orders:
  #  type: { modifyOrder: {description : "Delete temporary orders"} }

/job_chain:
  type:
    postJSON:
      description: job chain (volatile part)
      description1: !include documentation/common/compact.md
      description2: " "
      description3: !include documentation/jobChain/filteredByJobChain.md
      description4: " "
      description5: !include documentation/jobChain/maxOrders.md
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include documentation/jobChain/jobChains_v.md
      schema: !include schemas/jobChain/jobChainFilter-schema.json
      schema200: !include schemas/jobChain/jobChain200_v-schema.json
      example: TODO
      example200: !include examples/jobChain/jobChain_v-example.json
  /p:
    type:
      postJSON:
        description: job chain (permanent part)
        description1: !include documentation/common/compact.md
        description2: !include documentation/jobChain/filteredByJobChain.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/jobChain/jobChains_p.md
        schema: !include schemas/jobChain/jobChainFilter-schema.json
        schema200: !include schemas/jobChain/jobChain200_p-schema.json
        example: TODO
        example200: !include examples/jobChain/jobChain_p-example.json
  /history:
    type:
      postJSON:
        description: Last 25 order history item of the job chain from _JobScheduler_
        description1: !include documentation/jobChain/filteredByJobChain.md
        description2: !include documentation/common/maxLastHistoryItems.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: TODO
        schema: !include schemas/jobChain/jobChainHistoryFilter-schema.json
        schema200: !include schemas/order/history-schema.json
        example: TODO
        example200: !include examples/jobChain/orderHistory-example.json
  /configuration:
    type:
      postJSON:
        description: !include documentation/common/configuration.md
        description1: !include documentation/jobChain/filteredByJobChain.md
        description2: !include documentation/common/configurationFileMimeParam.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: Returns the job chain configuration in XML or HTML format
        schema: !include schemas/jobChain/jobChainConfigurationFilter-schema.json
        schema200: !include schemas/common/configuration-schema.json
        example: TODO
        example200: !include examples/jobChain/configuration-example.json

/job_chain_nodes:
  description: This resource doesn't have a response. Use ./skip, ./stop, ./activate
  /skip:
    type:
      modifyJobChainNode:
        description: "skip job chain nodes"
        audit: !include documentation/audit/auditLog.md
  /stop:
    type:
      modifyJobChainNode:
        description: "stop job chain nodes"
        audit: !include documentation/audit/auditLog.md
  /activate:
    type:
      modifyJobChainNode:
        description: This service unstops and unskips stopped and/or skipped nodes.
        audit: !include documentation/audit/auditLog.md

/locks:
  type:
    postJSON:
      description: Collection of lock objects
      description1: !include documentation/lock/filteredByLocks.md
      description2: !include documentation/common/regex.md
      description3: !include documentation/common/folders.md
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: TODO
      schema: !include schemas/lock/locksFilter-schema.json
      schema200: !include schemas/lock/locks_v-schema.json
      example: TODO
      example200: !include examples/lock/locks_v-example.json
  /p:
    type:
      postJSON:
        description: Collection of lock objects
        description1: !include documentation/lock/filteredByLocks.md
        description2: !include documentation/common/regex.md
        description3: !include documentation/common/folders.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/lock/locks_p.md
        schema: !include schemas/lock/locksFilter-schema.json
        schema200: !include schemas/lock/locks_p-schema.json
        example: TODO
        example200: !include examples/lock/locks_p-example.json
/lock/configuration:
    type:
      postJSON:
        description: !include documentation/common/configuration.md
        description1: include documentation/lock/lockRequired.md
        description2: !include documentation/common/configurationFileMimeParam.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: Returns the lock configuration in XML or HTML format
        schema: !include schemas/lock/lockConfigurationFilter-schema.json
        schema200: !include schemas/common/configuration-schema.json
        example: !include examples/lock/filteredLock-example.json
        example200: !include examples/lock/configuration-example.json

# entfaellt
#/log:
#  /categories:
#    type:
#      getBaseWithoutExample:
#        description: " "
#        description200: " "
#        schema200: !include schemas/log/categories-schema.json
#    /set:
#      type:
#        postJSONWithOkResponse:
#          description: " "
#          schema: !include schemas/log/setCategories-schema.json
#          example: "TODO"
#    /reset:
#      type:
#        postJSONWithOkResponse:
#          description: "A delay in seconds is optional"
#          schema: !include schemas/log/resetCategories-schema.json
#          example: 60

/schedules:
  type:
    postJSON:
      description: Schedules (volatile part)
      description1: " "
      description2: !include documentation/common/regex.md
      description3: !include documentation/schedule/filteredBySchedules.md
      description4: !include documentation/schedule/filteredByScheduleState.md
      description5: !include documentation/common/folders.md
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include documentation/schedule/schedules_v.md
      schema: !include schemas/schedule/schedulesFilter-schema.json
      schema200: !include schemas/schedule/schedules_v-schema.json
      example: !include examples/schedule/filteredSchedules-example.json
      example200: !include examples/schedule/schedules_v-example.json
  /p:
    type:
      postJSON:
        description: Schedules (permanent part)
        description1: " "
        description2: !include documentation/common/regex.md
        description3: !include documentation/schedule/filteredBySchedules.md
        description4: " "
        description5: !include documentation/common/folders.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/schedule/schedules_p.md
        schema: !include schemas/schedule/schedulesFilter-schema.json
        schema200: !include schemas/schedule/schedules_p-schema.json
        example: !include examples/schedule/filteredSchedules-example.json
        example200: !include examples/schedule/schedules_p-example.json


/schedule:
  type:
    postJSON:
      description: schedule (volatile part)
      description1: " "
      description2: !include documentation/schedule/scheduleRequired.md
      description3: " "
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include documentation/schedule/schedules_v.md
      schema: !include schemas/schedule/scheduleFilter-schema.json
      schema200: !include schemas/schedule/schedule200_v-schema.json
      example: !include examples/schedule/filteredScheduleWithCompact-example.json
      example200: !include examples/schedule/schedule_v-example.json
  /p:
    type:
      postJSON:
        description: schedule (permanent part)
        description1: " "
        description2: !include documentation/schedule/scheduleRequired.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/schedule/schedules_p.md
        schema: !include schemas/schedule/scheduleFilter-schema.json
        schema200: !include schemas/schedule/schedule200_p-schema.json
        example: !include examples/schedule/filteredScheduleWithCompact-example.json
        example200: !include examples/schedule/schedule_p-example.json
  #/run_time:
  #  type:
  #    postJSON:
  #      description: run time as XML string embedded in JSON
  #      description1: !include documentation/schedule/scheduleRequired.md
  #      description2: " "
  #      description3: " "
  #      description4: " "
  #      description5: " "
  #      description6: " "
  #      description7: " "
  #      description8: " "
  #      description9: " "
  #      description200: returns the run time as XML string in the JSON content field
  #      schema: !include schemas/schedule/scheduleFilter-schema.json
  #      schema200: !include schemas/common/runtime200-schema.json
  #      example: TODO
  #      example200: !include examples/common/runtime-example.json
  /configuration:
    type:
      postJSON:
        description: !include documentation/common/configuration.md
        description1: !include documentation/schedule/scheduleRequired.md
        description2: !include documentation/common/configurationFileMimeParam.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: Returns the schedule configuration in XML or HTML format
        schema: !include schemas/schedule/scheduleConfigurationFilter-schema.json
        schema200: !include schemas/common/configuration-schema.json
        example: !include examples/schedule/filteredSchedule-example.json
        example200: !include examples/schedule/configuration-example.json
  /set_run_time:
    type:
      postJSON:
        description: edit schedule
        description1: !include documentation/schedule/scheduleRequired.md
        description2: !include documentation/schedule/runTime.md
        description3: !include documentation/audit/auditLog.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: It returns an _ok_.
        schema: !include schemas/schedule/modifyRuntime-schema.json
        schema200: ok
        example: !include examples/schedule/scheduleWithRunTime-example.json
        example200: |
            {
              "deliveryDate":"2016-05-05T21:13:35Z",
              "surveyDate":"2016-05-05T21:13:34Z",
              "ok":true
            }
  /calendars:
    type:
      postJSON:
        description: send assigned calendars 
        description1: !include documentation/schedule/scheduleRequired.md
        description2: !include documentation/common/compact.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/calendar/calendar.md
        schema: !include schemas/schedule/scheduleFilter-schema.json
        schema200: !include schemas/calendar/calendars-schema.json
        example: !include examples/schedule/filteredSchedule-example.json
        example200: " "

/process_classes:
  type:
    postJSON:
      description: process classes (volatile part)
      description1: !include documentation/processClass/filteredByProcessClasses.md
      description2: !include documentation/common/regex.md
      description3: " "
      description4: " "
      description5: !include documentation/common/folders.md
      description6: !include documentation/processClass/filteredByHasAgent.md
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include documentation/processClass/processClass_v.md
      schema: !include schemas/processClass/processClassesFilter-schema.json
      schema200: !include schemas/processClass/processClasses_v-schema.json
      example: TODO
      example200: !include examples/processClass/processClasses_v-example.json
  /p:
    type:
      postJSON:
        description: process classes (permanent part)
        description1: !include documentation/processClass/filteredByProcessClasses.md
        description2: !include documentation/common/regex.md
        description3: " "
        description4: " "
        description5: !include documentation/common/folders.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/processClass/processClass_p.md
        schema: !include schemas/processClass/processClassesFilter-schema.json
        schema200: !include schemas/processClass/processClasses_p-schema.json
        example: TODO
        example200: !include examples/processClass/processClasses_p-example.json
/process_class:
  /configuration:
    type:
      postJSON:
        description: !include documentation/common/configuration.md
        description1: !include documentation/processClass/processClassRequired.md
        description2: !include documentation/common/configurationFileMimeParam.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: Returns the process class configuration in XML or HTML format
        schema: !include schemas/processClass/processClassConfigurationFilter-schema.json
        schema200: !include schemas/common/configuration-schema.json
        example: TODO
        example200: !include examples/processClass/configuration-example.json

/plan:
  type:
    postJSON:
      description: daily plan
      description1: " "
      description2: !include documentation/common/dateFrom.md
      description3: !include documentation/common/dateTo.md
      description4: !include documentation/common/timeZone.md
      description5: !include documentation/common/regex.md
      description6: !include documentation/plan/state.md
      description7: !include documentation/common/folders.md
      description8: !include documentation/jobChain/jobChain.md
      description9: !include documentation/order/orderId.md
      description10: !include documentation/job/job.md
      description200: " "
      schema: !include schemas/plan/planFilter-schema.json
      schema200: !include schemas/plan/plan-schema.json
      example: TODO
      example200: !include examples/plan/plan-example.json
  /from_run_time:
    type:
      postJSON:
        description: planned starts from runtime
        description1: " "
        description2: " "
        description3: !include documentation/plan/runTime.md
        description4: !include documentation/plan/dateFrom.md
        description5: !include documentation/plan/dateTo.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include schemas/plan/runTimePlanFilter-schema.json
        schema200: !include schemas/plan/runtime-schema.json
        example: !include examples/plan/runTime-example.json
        example200: !include examples/plan/runTime200-example.json

/tree:
  type:
    postJSON:
      description: Collections of specified object with folders information in a tree structure
      description1: !include documentation/common/compact.md
      description2: " "
      description3: " "
      description4: " "
      description5: " "
      description6: !include documentation/common/folders.md
      description7: !include documentation/common/typesParam.md
      description8: " "
      description9: " "
      description10: " "
      description200: !include documentation/tree/tree.md
      schema: !include schemas/tree/treeFilter-schema.json
      schema200: !include schemas/tree/treeView-schema.json
      example: !include examples/tree/filteredtree-example.json
      example200: !include examples/tree/tree-example.json

/configuration:
  type:
     postJSON:
       description: Responds a configuration from the server (database)
#       description1: !include documentation/configuration/userRequiredParam.md
#       description2: !include documentation/configuration/configurationTypeRequiredParam.md
#       description3: !include documentation/configuration/objectTypeRequiredParam.md
#       description4: !include documentation/configuration/nameParam.md
       description1: " "
       description2: " "
       description3: " "
       description4: " "
       description5: !include documentation/configuration/configurationIdRequiredParam.md
       description6: " "
       description7: " "
       description8: " "
       description9: " "
       description10: " "
       description200: " "
       schema: !include schemas/configuration/configuration-schema.json
       schema200: !include schemas/configuration/configuration200-schema.json
       example: " "
       example200: " "
  /save:
    type:
       postJSON:
         description: Stores a configuration on the server (database)
         description1: !include documentation/configuration/userRequiredParam.md
         description2: !include documentation/configuration/configurationTypeRequiredParam.md
         description3: !include documentation/configuration/objectTypeRequiredParam.md
         description4: !include documentation/configuration/nameParam.md
         description5: !include documentation/configuration/sharedParam.md
         description6: !include documentation/configuration/itemParam.md
         description7: !include documentation/configuration/configurationIdRequiredParam.md
         description8: " "
         description9: " "
         description10: " "
         description200: |
             *Response contains the ``id`` of the customization.*<br/>
             It seems to be unnecessary but if a new customization is saved
             (with ``id=0`` in the request) then you get the new id.
         schema: !include schemas/configuration/configuration-schema.json
         schema200: !include schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  /delete:
    type:
       postJSON:
         description: Deletes a configuration on the server (database)
#         description1: !include documentation/configuration/userRequiredParam.md
#         description2: !include documentation/configuration/configurationTypeRequiredParam.md
#         description3: !include documentation/configuration/objectTypeRequiredParam.md
#         description4: !include documentation/configuration/nameParam.md
         description1: " "
         description2: " "
         description3: " "
         description4: " "
         description5: !include documentation/configuration/configurationIdRequiredParam.md
         description6: " "
         description7: " "
         description8: " "
         description9: " "
         description10: " "
         description200: " "
         schema: !include schemas/configuration/configuration-schema.json
         schema200: !include schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  /share:
    type:
       postJSON:
         description: set a configuration as shared
#         description1: !include documentation/configuration/userRequiredParam.md
#         description2: !include documentation/configuration/configurationTypeRequiredParam.md
#         description3: !include documentation/configuration/objectTypeRequiredParam.md
#         description4: !include documentation/configuration/nameParam.md
         description1: " "
         description2: " "
         description3: " "
         description4: " "
         description5: !include documentation/configuration/configurationIdRequiredParam.md
         description6: " "
         description7: " "
         description8: " "
         description9: " "
         description10: " "
         description200: " "
         schema: !include schemas/configuration/configuration-schema.json
         schema200: !include schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  /make_private:
    type:
       postJSON:
         description: set a configuration as unshared
#         description1: !include documentation/configuration/userRequiredParam.md
#         description2: !include documentation/configuration/configurationTypeRequiredParam.md
#         description3: !include documentation/configuration/objectTypeRequiredParam.md
#         description4: !include documentation/configuration/nameParam.md
         description1: " "
         description2: " "
         description3: " "
         description4: " "
         description5: !include documentation/configuration/configurationIdRequiredParam.md
         description6: " "
         description7: " "
         description8: " "
         description9: " "
         description10: " "
         description200: " "
         schema: !include schemas/configuration/configuration-schema.json
         schema200: !include schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  /login:
    type: loginConfiguration

/configurations:
  type:
     postJSON:
       description: Sends collection of configuration items
       description1: !include documentation/configuration/userParam.md
       description2: !include documentation/configuration/configurationTypeParam.md
       description3: !include documentation/configuration/objectTypeParam.md
       description4: !include documentation/configuration/sharedParam.md
       description5: " "
       description6: " "
       description7: " "
       description8: " "
       description9: " "
       description10: " "
       description200: " "
       schema: !include schemas/configuration/configurationsFilter-schema.json
       schema200: !include schemas/configuration/configurations-schema.json
       example: " "
       example200: " "
#  /shared:
#    type:
#       postOnlyId:
#         description: Sends collection of all shared configuration items
#         description200: " "
#         schema200: !include schemas/configuration/configurations-schema.json
#         example200: " "

/audit_log:
  type:
    postJSONWithOptionalJSId:
      description: Responds the audit log
      description1: !include documentation/common/dateFrom.md
      description2: !include documentation/common/dateTo.md
      description3: !include documentation/common/timeZone.md
      description4: !include documentation/common/regex.md
      description5: !include documentation/common/folders.md
      description6: !include documentation/job/filteredByJobs.md
      description7: !include documentation/order/filteredByOrders.md
      description8: !include documentation/calendar/filteredByCalendars.md
      description9: !include documentation/audit/ticketLink.md
      description10: !include documentation/configuration/userParam.md
      description11: !include documentation/common/limit.md
      description12: " "
      description200: !include documentation/audit/audit.md
      schema: !include schemas/audit/auditLogFilter-schema.json
      schema200: !include schemas/audit/auditLog-schema.json
      example: " "
      example200: " "
  /comments:
    type:
      postOnlyAccessToken:
        description: Response contains pre-defined comments and force_comments_for_audit_log settings from joc.properties file
        description200: " "
        schema200: !include schemas/audit/comments-schema.json
        example200: !include examples/audit/comments-example.json

/report/agents:
  type:
    postJSONWithOptionalJSId:
      description: Report of JobScheduler Agent tasks
      description1: !include documentation/report/agentsParam.md
      description2: !include documentation/common/dateFrom.md
      description3: !include documentation/common/dateTo.md
      description4: !include documentation/common/timeZone.md
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description11: " "
      description12: " "
      description200: !include documentation/report/agents.md
      schema: !include schemas/report/agentsFilter-schema.json
      schema200: !include schemas/report/agents-schema.json
      example: !include examples/report/agentsParam-example.json
      example200: !include examples/report/agents-example.json

/yade:
  description: |
    This is not an API call. Use its children!!
    
  /overview/summary:
    type:
      postJSON:
        description: |
            Summary with number of<h5>
            * successful transferred files
            * failed transferred files
  
            filtered by <code>dateFrom</code> parameter until now
            </h5>
        description1: !include documentation/common/dateFrom.md
        description2: !include documentation/common/dateTo.md
        description3: !include documentation/common/timeZone.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema200: !include schemas/yade/summary-schema.json
        schema: !include schemas/yade/transferFilter-schema.json
        example: |
            {
              "dateFrom": "1d"
            }
        example200: !include examples/yade/summary-example.json
  /overview/snapshot:
      type:
        postOnlyId:
          description: |
            Summary with number of<h5>
            * running YADE transfers
            * suspended YADE transfers
            * YADE transfers with setback
            * waiting for resource YADE transfers
            </h5>
          description200: " "
          example: " "
          schema200: !include schemas/yade/snapshot-schema.json
          example200: " "

  /transfers:
    type:
      postJSON16:
        description: Responds YADE transfers
        description1: !include documentation/yade/transferIds.md
        description2: !include documentation/common/compact.md
        description3: !include documentation/common/dateFrom.md
        description4: !include documentation/common/dateTo.md
        description5: !include documentation/common/timeZone.md
        description6: !include documentation/yade/operations.md
        description7: !include documentation/yade/states.md
        description8: !include documentation/yade/mandator.md
        description9: !include documentation/yade/source.md
        description10: !include documentation/yade/target.md
        description11: !include documentation/yade/hasIntervention.md
        description12: !include documentation/yade/isIntervention.md
        description13: !include documentation/yade/profile.md
        description14: !include documentation/yade/sourcePath.md
        description15: !include documentation/yade/targetPath.md
        description16: !include documentation/common/limit.md
        description200: !include documentation/yade/transfers.md
        schema: !include schemas/yade/transferFilter-schema.json
        schema200: !include schemas/yade/transfers-schema.json
        example: " "
        example200: " "

    /restart:
      type:
        postYADEJSONWithOkResponse:
          description: Restarts YADE transfers for some failed files
          audit: !include documentation/audit/auditLog.md
          schema: !include schemas/yade/modifyTransfers-schema.json
          example: " "
  
  /files:
    type:
      postJSON:
        description: Responds transferred files
        description1: !include documentation/common/compact.md
        description2: " "
        description3: !include documentation/yade/transferIds.md
        description4: !include documentation/yade/interventionTransferIds.md
        description5: " "
        description6: !include documentation/yade/fileStates.md
        description7: " "
        description8: !include documentation/yade/sourcePath.md
        description9: !include documentation/yade/targetPath.md
        description10: !include documentation/common/limit.md
        description200: " "
        schema: !include schemas/yade/filesFilter-schema.json
        schema200: !include schemas/yade/files-schema.json
        example: " "
        example200: " "

  /file:
    type:
      postJSON:
        description: Responds transferred file
        description1: !include documentation/common/compact.md
        description2: !include documentation/yade/fileId.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include schemas/yade/fileFilter-schema.json
        schema200: !include schemas/yade/file200-schema.json
        example: " "
        example200: " "

  /transfer/order:
    type:
      postJSON:
        description: sends parametrisized order information for "resume order" dialog
        description1: !include documentation/yade/transferId.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include schemas/yade/modifyTransfer-schema.json
        schema200: !include schemas/order/order200_v-schema.json  
        example: " "
        example200: " "

  /orders:
    type:
      postJSON:
        description: Returns a collection of orders (volatile part) filtered by a period, job chains or order state
        description1: !include documentation/common/compact.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: !include documentation/order/filteredByOrders.md
        description7: !include documentation/yade/orderstate.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/order/orders_v.md
        schema: !include schemas/order/ordersFilter-schema.json
        schema200: !include schemas/order/orders_v-schema.json
        example: !include examples/order/filteredOrders-example.json
        example200: !include examples/order/orders_v-example.json

/calendars:
  type:
    postJSON:
      description: Sends collection of calendar items
      description1: !include documentation/common/compact.md
      description2: !include documentation/common/regex.md
      description3: !include documentation/common/folders.md
      description4: !include documentation/calendar/calendarType.md
      description5: !include documentation/calendar/categories.md
      description6: !include documentation/calendar/filteredByCalendars.md
      description7: !include documentation/calendar/filteredByCalendarIds.md
      description8: " "
      description9: " "
      description10: " "
      description200: !include documentation/calendar/calendar.md
      schema: !include schemas/calendar/calendarsFilter-schema.json
      schema200: !include schemas/calendar/calendars-schema.json
      example: " "
      example200: " "
      
  /used:
    type:
      postJSON:
        description: Sends compact collection of calendar items with objects which use it
        description1: " "
        description2: !include documentation/common/regex.md
        description3: !include documentation/common/folders.md
        description4: !include documentation/calendar/calendarType.md
        description5: !include documentation/calendar/categories.md
        description6: !include documentation/calendar/filteredByCalendars.md
        description7: !include documentation/calendar/filteredByCalendarIds.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include documentation/calendar/calendar.md
        schema: !include schemas/calendar/calendarsFilter-schema.json
        schema200: !include schemas/calendar/calendars-schema.json
        example: " "
        example200: " "
          
  /categories:
    type:
      postOnlyId:
        description: Sends categories
        description1: " "
        description2: " "
        description3: " "
        description4: " "
        description200: " "
        schema200: !include schemas/calendar/categories-schema.json
        example200: " "
        
  /delete:
    type:
      modifyCalendar:
        description: Deletes calendars
        audit: !include documentation/audit/auditLog.md
  
  /export:
    type:
      postForDownload:
        description: Provides Calendars export file as download  (see <a href="../calendars/import.html">./calendars/import</a>)
        description1: !include documentation/calendar/filteredByCalendars.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        schema: !include schemas/calendar/calendarsFilter-schema.json
        example: " "

  /import:
    type:
      postCalendarWithOkResponse:
#      postForUpload:
        description: Imports Calendar export file (see <a href="../calendars/export.html">./calendars/export</a>)
        description1: !include documentation/calendar/calendarsObj.md
        description2: " "
        description3: " "
        description4: " "
        description200: " "
        schema: !include schemas/calendar/calendarImportFilter-schema.json
        audit: !include documentation/audit/auditLog.md
        example: " "

/calendar:
  type:
    postJSON:
      description: Sends calendar
      description1: " "
      description2: " "
      description3: !include documentation/calendar/calendarId.md
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include documentation/calendar/calendar.md
      schema: !include schemas/calendar/calendarPath-schema.json
      schema200: !include schemas/calendar/calendar200-schema.json
      example: !include examples/calendar/calendar-example.json
      example200: " "
        
  /dates:
    type:
      postJSON:
        description: |
          Sends dates of a calendar
          <p style="font-weight: normal; font-size: 50%">One of the parameters ``calendar``, ``id`` or ``path`` is required. 
          The ``id`` and ``path`` parameter beats the ``calendar`` parameter</p>
        description1: !include documentation/calendar/calendarId.md
        description2: !include documentation/calendar/calendarObj.md
        description3: !include documentation/calendar/dateFrom.md
        description4: !include documentation/calendar/dateTo.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include schemas/calendar/calendarDatesFilter-schema.json
        schema200: !include schemas/calendar/dates-schema.json
        example: !include examples/calendar/calendarDates-example.json
        example200: " "
        
  /used:
    type:
      postJSON:
        description: Sends a list of jobs, orders and schedules which use the calendar
        description1: !include documentation/calendar/calendarId.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include schemas/calendar/calendarId-schema.json
        schema200: !include schemas/calendar/usedBy-schema.json
        example: " "
        example200: !include examples/calendar/calendarUsedBy-example.json
      
  /store:
    type:
      postCalendarWithOkResponse:
        description: Save or Rename a calendar
        description1: !include documentation/calendar/calendarStoreObj.md
        description2: " "
        description3: " "
        description4: " "
        schema: !include schemas/calendar/calendarObjectFilter-schema.json
        audit: !include documentation/audit/auditLog.md
        example: !include examples/calendar/calendarObj-example.json
  
  /save_as:
    type:
      postCalendarWithOkResponse:
        description: SaveAs a calendar
        description1: !include documentation/calendar/calendarObj.md
        description2: " "
        description3: " "
        description4: " "
        schema: !include schemas/calendar/calendarObjectFilter-schema.json
        audit: !include documentation/audit/auditLog.md
        example: !include examples/calendar/calendarObj-example.json
  
  /rename:
    type:
      postCalendarWithOkResponse:
        description: Renames calendar
        description1: !include documentation/calendar/calendarRequired.md
        description2: " "
        description3: !include documentation/calendar/calendarNewRequired.md
        description4: " "
        schema: !include schemas/calendar/calendarRenameFilter-schema.json
        audit: !include documentation/audit/auditLog.md
        example: !include examples/calendar/calendarRename-example.json
     
